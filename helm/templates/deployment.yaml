apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  labels:
    app.kubernetes.io/name: {{ .Values.app.name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Values.app.version | quote }}
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: {{ .Values.app.name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.app.name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        {{- if .Values.monitoring.prometheus.scrape }}
        prometheus.io/scrape: "true"
        prometheus.io/path: {{ .Values.monitoring.prometheus.path | quote }}
        prometheus.io/port: {{ .Values.monitoring.prometheus.port | quote }}
        {{- end }}
        {{- if .Values.vault.enabled }}
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: {{ .Values.vault.role | quote }}
        {{- range .Values.vault.secrets }}
        vault.hashicorp.com/agent-inject-secret-{{ .key }}: {{ $.Values.vault.path }}
        vault.hashicorp.com/agent-inject-template-{{ .key }}: |
          {{`{{- with secret "`}}{{ $.Values.vault.path }}{{`" -}}
          {{ .Data.data.`}}{{ .key }}{{` }}
          {{- end }}`}}
        {{- end }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        app.kubernetes.io/name: {{ .Values.app.name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Values.app.version | quote }}
        app.kubernetes.io/component: api
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Values.app.name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.app.port }}
              protocol: TCP
          # Load all environment variables from ConfigMap
          envFrom:
            - configMapRef:
                name: {{ .Values.app.name }}-config
          
          env:
            
            {{- if .Values.vault.enabled }}
            # Environment variables from Vault secrets (will be available as files in /vault/secrets/)
            # Note: Vault Agent will inject secrets as files, application should read from these files
            {{- range .Values.vault.secrets }}
            - name: {{ .name }}_FILE
              value: "/vault/secrets/{{ .key }}"
            {{- end }}
            {{- else if and .Values.secrets.enabled .Values.database.uri }}
            # Environment variables from Kubernetes secrets (non-Vault)
            - name: DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.name }}-secrets
                  key: DATABASE_URI
            {{- else if .Values.database.uri }}
            # Fallback to direct value if secrets are disabled
            - name: DATABASE_URI
              value: {{ .Values.database.uri | quote }}
            {{- end }}
            
            {{- if and .Values.secrets.enabled .Values.secrets.data (not .Values.vault.enabled) }}
            # Additional environment variables from Kubernetes secrets
            {{- range $key, $value := .Values.secrets.data }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.app.name }}-secrets
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            
            {{- if .Values.env.additional }}
            # Additional environment variables
            {{- range $key, $value := .Values.env.additional }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          {{- if and .Values.healthProbes.enabled .Values.healthProbes.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthProbes.path }}
              port: http
              scheme: HTTP
            initialDelaySeconds: {{ .Values.healthProbes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthProbes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.healthProbes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.healthProbes.readiness.failureThreshold }}
            successThreshold: {{ .Values.healthProbes.readiness.successThreshold }}
          {{- end }}
          {{- if and .Values.healthProbes.enabled .Values.healthProbes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthProbes.path }}
              port: http
              scheme: HTTP
            initialDelaySeconds: {{ .Values.healthProbes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthProbes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.healthProbes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.healthProbes.liveness.failureThreshold }}
          {{- end }}
          {{- if and .Values.startupProbe .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.startupProbe.path | default .Values.healthProbes.path }}
              port: http
              scheme: HTTP
              {{- if .Values.startupProbe.httpHeaders }}
              httpHeaders:
                {{- toYaml .Values.startupProbe.httpHeaders | nindent 16 }}
              {{- end }}
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          {{- end }}
          {{- if .Values.vault.enabled }}
          volumeMounts:
            - name: vault-secrets
              mountPath: /vault/secrets
              readOnly: true
          {{- end }}
      {{- if .Values.vault.enabled }}
      volumes:
        - name: vault-secrets
          emptyDir: {}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}